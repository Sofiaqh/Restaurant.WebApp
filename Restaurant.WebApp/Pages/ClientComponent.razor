@page "/clientcomponent"


@inject IClientServices clientServices

@if (client != null)
{


<MudDataGrid T="Client" Items="@client" RowsPerPage="5" SortMode="SortMode.Single" QuickFilter = "@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Clientes</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <Columns>
        <Column T="Client" Field="IdClient" Title="Id" />
        <Column T="Client" Field="Name" Title="Nombre" />
        <Column T="Client" Field="Document" Title="Documento" />
        <Column T="Client" Field="Phone" Title="Telefono" />
        <Column T="Client" Field="Adress" Title="Direccion" />
        
    </Columns>
   
    <PagerContent>
        <MudDataGridPager T="Client" />
    </PagerContent>
</MudDataGrid>
}

@code {
    IEnumerable<Client> client;
    private string _searchString;

    private Func<Client, bool> _quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(_searchString))
               return true;       

           if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
               return true;

           if (x.Document.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
               return true;

           if (x.Phone.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
               return true;

     if (x.Adress.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
           return true;




       if ($"{x.IdClient} {x.Name} {x.Document} {x.Phone} {x.Adress}".Contains(_searchString))
           return true;

       return false;
       };

    protected override async Task OnInitializedAsync()
    {
        var request  = await clientServices.GetClients();

        if (request != null)
            client = request;
    }

   
}


